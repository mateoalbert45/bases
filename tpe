3)a)  alter table alquiler add constraint fechaAlquiler
check(
fecha_desde <= fecha_hasta)


CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKSCAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS

CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS
CAMBIAR NOMBRE DE LOS CHECKS


3)b)  CREATE ASSERTION  pesoMaximo CHECK not exists(select 1
from pallet p join mov_entrada mv on(p.cod_pallet = mv.cod_pallet)
     join alquiler_posiciones ap on (mv.id_alquiler = ap.id_alquiler)
     join posicion pos on (ap.nro_posicion = pos.nro_posicion and ap.nro_estanteria = pos.nro_estanteria and ap.nro_fila = pos.nro_fila)
     join fila f on(pos.nro_estanteria = f.nro_estanteria and pos.nro_fila)
     group by p.cod_pallet
     having sum(p.peso) > f.peso_max_kg)
    
CREATE TRIGGER TR_1_fila_pesomaximo
before insert or update of nro_fila on fila
for each row
execute procedure TRFN_1_pesomaximo();
ç

CREATE FUNCTION TRFN_1_pesomaximo () RETURNS trigger as $body$
BEGIN
   
   IF (select 1
       from pallet p join mov_entrada mv on(p.cod_pallet = mv.cod_pallet)
        join alquiler_posiciones ap on (mv.id_alquiler = ap.id_alquiler)
        join posicion pos on (ap.nro_posicion = pos.nro_posicion and ap.nro_estanteria 
      = pos.nro_estanteria and ap.nro_fila = pos.nro_fila)
     join fila f on(pos.nro_estanteria = f.nro_estanteria and pos.nro_fila = f.nro_fila)
     Where f.nro_estanteria = new.nro_estanteria and f.nro_fila = new.nro_fila
     group by p.cod_pallet,f.peso_max_kg
     having sum(p.peso) > f.peso_max_kg) THEN
     RAISE EXCEPTION 'error de peso';
  END IF;
return new;
END;
$body$ LANGUAGE 'plpgsql';

3)c)
CREATE DOMAIN CK_1_posicion_TipoValido
AS varchar (40) NOT NULL
CHECK (tipo IN ('general','vidrio','insecticidas','inflamable'));
si lo pones directo en la consola de sql no anda, pero si lo pones seleccioanando la parte que dice  "restricciones" en la tabla si anda


PREGUNTAR ESTO ROMPE TODO

update mov_entrada
set cod_pallet = 5
where nro_fila = 1 and nro_posicion = 2

EJERCICIO C)A)
select * from ListaPosLibres('2018-03-07')//esto es para pr si la funcion anda douuuuuu

CREATE OR REPLACE FUNCTION FN_01_ListaPosLibres(fecha DATE) 
 RETURNS TABLE ( nro_fila INT, nro_estanteria INT, nro_posicion INT)
AS $$ 
BEGIN
 RETURN QUERY SELECT ap.nro_posicion,ap.nro_estanteria,ap.nro_fila
      FROM  posicion p join alquiler_posiciones ap on(p.nro_posicion = ap.nro_posicion)
            join alquiler a on (ap.id_alquiler = a.id_alquiler)
      where  not (fecha >= fecha_desde  and  fecha <= fecha_hasta);                                         
END;
$$ LANGUAGE plpgsql;

anda mal
---
CREATE OR REPLACE FUNCTION ListaPosLibres(fecha DATE) 
 RETURNS TABLE ( nro_fila INT, nro_estanteria INT, nro_posicion INT, id_cliente INT, id_alquiler INT)
AS $$ 
BEGIN
 RETURN QUERY SELECT ap.nro_posicion,ap.nro_estanteria,ap.nro_fila, a.id_cliente, a.id_alquiler
      FROM  posicion p join alquiler_posiciones ap on(p.nro_posicion = ap.nro_posicion)
            join alquiler a on (ap.id_alquiler = a.id_alquiler)
      where not exists(select 1 from  posicion p1 join alquiler_posiciones ap1 (p.nro_posicion = ap1.nro_posicion) where fecha >= fecha_desde  and  fecha <= fecha_hasta);                                       
END;
$$ LANGUAGE plpgsql;
//para cada num de posicion, entre a todos sus id alquiler y checkee la fecha. donde encuentre uno solo que esté dentro de esa fecha, no devuelve nada.
---
anda mal pero intentamos cambiarlo



EJERCICIO C)B)
CREATE OR REPLACE FUNCTION FN_01_ClientesVencimiento(dias INT)
 RETURNS TABLE ( cuit_cuil INT, apellido VARCHAR, nombre VARCHAR, fecha_hasta DATE)
AS $$ 
BEGIN
RETURN QUERY SELECT c.cuit_cuil,c.apellido,c.nombre,a.fecha_hasta
      FROM cliente c join alquiler a on (c.cuit_cuil = a.id_cliente)
   where DATE_PART('day', NOW() - a.fecha_hasta) <= dias;
      END;
$$ LANGUAGE plpgsql;

estos 2 de arriba estan mal, porque no se tienen que usar vistas ya que no son reusables. tenemos q usar procedimientos, y el 5 que pusimos tie
que ser configurable, o sea, se le tiene q poder poner cualquier valor

AGREGAR EL POS GLOBAL EN POSICION (CREO) CON UNIQUE

D)1)
CREATE VIEW GR01_estado_posicion as
select ap.nro_posicion , ap.nro_estanteria , ap.nro_fila, ap.estado, 
CASE 
WHEN ap.estado = true THEN DATE_PART('day', fecha_hasta) - DATE_PART('day', fecha_desde)
END as "dias restantes"
from GR01_alquiler_posiciones ap 
join GR01_alquiler a 
on (ap.id_alquiler = a.id_alquiler)

D)2)
CREATE VIEW GR01_clientes_mas_gastaron
as
select id_cliente, sum(
CASE 
WHEN fecha_hasta is null THEN extract(day from(NOW() - fecha_desde))*(importe_dia)
else (extract(day from(fecha_hasta)) - extract(day from(fecha_desde)))*(importe_dia)
END ) as cantidad  
from GR01_alquiler
where fecha_desde <= NOW()
and fecha_desde >= date('now') - interval '1 year'
group by id_cliente
order by cantidad DESC
limit 10


---
los trigers estos

CREATE TRIGGER tr_1_alquiler_posiciones_pesomaximo AFTER INSERT OR UPDATE OF nro_fila, nro_estanteria ON unc_249407.GR01_alquiler_posiciones FOR EACH ROW EXECUTE PROCEDURE trfn_1_pesomaximo()	
CREATE TRIGGER tr_1_posicion_pesomaximo BEFORE INSERT OR UPDATE OF nro_fila, nro_estanteria ON unc_249407.GR01_posicion FOR EACH ROW EXECUTE PROCEDURE trfn_1_pesomaximo()	
CREATE TRIGGER tr_1_fila_pesomaximo AFTER INSERT OR UPDATE OF nro_fila,nro_estanteria ON unc_249407.GR01_fila FOR EACH ROW EXECUTE PROCEDURE trfn_1_pesomaximo()

preguntar


C)A)
CREATE OR REPLACE FUNCTION FN_01_ListaPosLibres(fecha DATE) 
 RETURNS TABLE ( nro_fila INT, nro_estanteria INT, nro_posicion INT)
AS $$ 
BEGIN
 RETURN QUERY SELECT ap.nro_posicion,ap.nro_estanteria,ap.nro_fila
      FROM  posicion p join alquiler_posiciones ap on(p.nro_posicion = ap.nro_posicion)
            join alquiler a on (ap.id_alquiler = a.id_alquiler)
      where  not (fecha >= fecha_desde  and  fecha <= fecha_hasta);                                         
END;
$$ LANGUAGE plpgsql;

anda mal
---
CREATE OR REPLACE FUNCTION ListaPosLibres(fecha DATE) 
 RETURNS TABLE ( nro_fila INT, nro_estanteria INT, nro_posicion INT, id_cliente INT, id_alquiler INT)
AS $$ 
BEGIN
 RETURN QUERY SELECT ap.nro_posicion,ap.nro_estanteria,ap.nro_fila, a.id_cliente, a.id_alquiler
      FROM  posicion p join alquiler_posiciones ap on(p.nro_posicion = ap.nro_posicion)
            join alquiler a on (ap.id_alquiler = a.id_alquiler)
      where not exists(select 1 from  posicion p1 join alquiler_posiciones ap1 (p.nro_posicion = ap1.nro_posicion) where fecha >= fecha_desde  and  fecha <= fecha_hasta);                                       
END;
$$ LANGUAGE plpgsql;
//para cada num de posicion, entre a todos sus id alquiler y checkee la fecha. donde encuentre uno solo que esté dentro de esa fecha, no devuelve nada.
---
anda mal pero intentamos cambiarlo

CREATE DOMAIN CK_1_posicion_TipoValido
AS varchar (40) NOT NULL
CHECK (tipo IN ('general','vidrio','insecticidas','inflamable'));
si lo pones directo en la consola de sql no anda, pero si lo pones seleccioanando la parte que dice  "restricciones" en la tabla si anda

CREATE VIEW GR01_estado_posicion as
select ap.nro_posicion , ap.nro_estanteria , ap.nro_fila, ap.estado, 
CASE 
WHEN ap.estado = true THEN DATE_PART('day', fecha_hasta) - DATE_PART('day', fecha_desde)
END as "dias restantes"
from GR01_alquiler_posiciones ap 
join GR01_alquiler a 
on (ap.id_alquiler = a.id_alquiler)
preguntar lo de estado
