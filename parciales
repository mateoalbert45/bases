-- EJERCICIO 8 Realice un procedimiento que al ejecutarse borre los datos de la tabla ReporteProblemas (si hubieran) 
--y la complete con los productos no cerrados conjuntamente con los problemas no resueltos (fechas de cierre nulas) 
create table ReporteProblemas (
id_producto varchar(5),
descripcion_producto varchar(80), 
id_problema int, 
descripcion_problema varchar(80),
fecha_reporte timestamp );

CREATE OR REPLACE FUNCTION completar_reporteproblema() 
RETURNS integer AS 
$BODY$
DECLARE
	mi_consulta RECORD;
BEGIN
	DELETE FROM REPORTEPROBLEMA;
	FOR mi_consulta IN SELECT O.id_producto, O.descripcion AS descripcion_producto, P.id_problema, P.descripcion, fecha_reporte
						FROM PROBLEMA P JOIN PRODUCTO O ON (P.id_producto = O.id_producto)
						WHERE P.fecha_cierre is null 
						OR O.fecha_cierre IS NULL 
		LOOP
		INSERT INTO REPORTEPROBLEMA VALUES (
				mi_consulta.id_producto, 
				mi_consulta.descripcion_producto, 
				mi_consulta.id_problema, 
				mi_consulta.descripcion, 
				mi_consulta.fecha_reporte);				
		

    END LOOP;
	RETURN 1;
END;
$BODY$ 
LANGUAGE plpgsql;	


--Consulta que devuelva los datos de los empleados que sean jefes de los departamentos de distribuidoras que haya entregado mas de dos --peliculas entre los aÃ±os 2005 y 2010 inclusive

select e.id_empleado, e.id_jefe, d.id_distribuidor, d.id_departamento
from empleado e join departamento d on (e.id_departamento = d.id_departamento)
join distribuidor di on (d.id_distribuidor = di.id_distribuidor)
join entrega en on (d.id_distribuidor = en.id_distribuidor)
join renglon_entrega re on (en.nro_entrega = re.nro_entrega)
where e.id_empleado = d.jefe_departamento
and en.fecha_entrega between '01/01/2005' and '12/31/2010'
group by e.id_empleado, d.id_departamento, d.id_distribuidor
having count(distinct re.codigo_pelicula) > 2
order by id_departamento



-----


CREATE VIEW GR01_clientes_mas_gastaron_vista_aparte
as
select 
from GR01_clientes_mas_gastaron 
where tipo_elemnto = 'M'



aleter table desarrollador 
add constrint ndhea_desarrolladorasovich
check(salario is null and email is not null
	or salario is not null and email is not null
	or salario is not null and email is null


create assertion ejer_3_fecha_cierre
check not exists(select 1
from problema prob join sub_prod sp
	join producto prod
where prob.fecha_cierre > prod.fecha_cierre
)



CREATE FUNCTION ej_5_fechaCierre () RETURNS trigger as $body$
BEGIN
   
   IF exist ( select 1
	from problema prob join producto prod
	where prob.fecha_cierre > prod.fecha_cierre)
	THEN
     RAISE EXCEPTION 'error de fecha';
  END IF;
return new;
END;
$body$ LANGUAGE 'plpgsql';


create trigger tr_ej_5_fechaCierre 
after insert or update of problema on fecha_cierre
for each row
execute procedure ej_5_fechaCierre ();

select * from desarrollador D
where NOT exists(
                                 select *
                                 from desarrollador d1 join problema p on (d1.id_equipo = p.id_equ_reporta
				 and d1.id_equipo = p.id_equ_a_cargo
				 and d1.id_desar = p.id_des_a_reporta
				 and d1.id_desar = p.id_des_a_cargo)
                              
                                 )
